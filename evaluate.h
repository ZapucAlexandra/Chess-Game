//Tabele predefinite pentru calculul bonusului in functie de pozitia piesei.
int pawnW[8][8] = { {0,  0,  0,  0,  0,  0,  0,  0},
					{50, 50, 50, 50, 50, 50, 50, 50},
					{10, 10, 20, 30, 30, 20, 10, 10},
					{5,  5, 10, 25, 25, 10,  5,  5},
					{ 0,  0,  0, 20, 20,  0,  0,  0},
					{5, -5,-10,  0,  0,-10, -5,  5},
					{5, 10, 10,-20,-20, 10, 10,  5},
					{0,  0,  0,  0,  0,  0,  0,  0}};
int pawnB[8][8] = { {0,  0,  0,  0,  0,  0,  0,  0},
					{5, 10, 10,-20,-20, 10, 10,  5},
					{5, -5,-10,  0,  0,-10, -5,  5},
					{ 0,  0,  0, 20, 20,  0,  0,  0},
					{5,  5, 10, 25, 25, 10,  5,  5},
					{10, 10, 20, 30, 30, 20, 10, 10},
					{50, 50, 50, 50, 50, 50, 50, 50},
					{0,  0,  0,  0,  0,  0,  0,  0}};
int knightW[8][8] = {{-50,-40,-30,-30,-30,-30,-40,-50},
					{-40,-20,  0,  0,  0,  0,-20,-40},
					{-30,  0, 10, 15, 15, 10,  0,-30},
					{-30,  5, 15, 20, 20, 15,  5,-30},
					{-30,  0, 15, 20, 20, 15,  0,-30},
					{-30,  5, 10, 15, 15, 10,  5,-30},
					{-40,-20,  0,  5,  5,  0,-20,-40},
					{-50,-40,-30,-30,-30,-30,-40,-50}};
int knightB[8][8] = {{-50,-40,-30,-30,-30,-30,-40,-50},
					{-40,-20,  0,  5,  5,  0,-20,-40},
					{-30,  5, 10, 15, 15, 10,  5,-30},
					{-30,  0, 15, 20, 20, 15,  0,-30},
					{-30,  5, 15, 20, 20, 15,  5,-30},
					{-30,  0, 10, 15, 15, 10,  0,-30},
					{-40,-20,  0,  0,  0,  0,-20,-40},
					{-50,-40,-30,-30,-30,-30,-40,-50}};
int bishopW[8][8] = {{-20,-10,-10,-10,-10,-10,-10,-20},
					{-10,  0,  0,  0,  0,  0,  0,-10},
					{-10,  0,  5, 10, 10,  5,  0,-10},
					{-10,  5,  5, 10, 10,  5,  5,-10},
					{-10,  0, 10, 10, 10, 10,  0,-10},
					{-10, 10, 10, 10, 10, 10, 10,-10},
					{-10,  5,  0,  0,  0,  0,  5,-10},
					{-20,-10,-10,-10,-10,-10,-10,-20}};
int bishopB[8][8] = {{-20,-10,-10,-10,-10,-10,-10,-20},
					{-10,  5,  0,  0,  0,  0,  5,-10},
					{-10, 10, 10, 10, 10, 10, 10,-10},
					{-10,  0, 10, 10, 10, 10,  0,-10},
					{-10,  5,  5, 10, 10,  5,  5,-10},
					{-10,  0,  5, 10, 10,  5,  0,-10},
					{-10,  0,  0,  0,  0,  0,  0,-10},
					{-20,-10,-10,-10,-10,-10,-10,-20}};
int rookW[8][8] = {{0,  0,  0,  0,  0,  0,  0,  0},
					{5, 10, 10, 10, 10, 10, 10,  5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{0,  0,  0,  5,  5,  0,  0,  0}};
int rookB[8][8] = {{0,  0,  0,  5,  5,  0,  0,  0},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{-5,  0,  0,  0,  0,  0,  0, -5},
					{5, 10, 10, 10, 10, 10, 10,  5},
					{0,  0,  0,  0,  0,  0,  0,  0}};
int queenW[8][8] = {{-20,-10,-10, -5, -5,-10,-10,-20},
					{-10,  0,  0,  0,  0,  0,  0,-10},
					{-10,  0,  5,  5,  5,  5,  0,-10},
					{-5,  0,  5,  5,  5,  5,  0, -5},
					{0,  0,  5,  5,  5,  5,  0, -5},
					{-10,  5,  5,  5,  5,  5,  0,-10},
					{-10,  0,  5,  0,  0,  0,  0,-10},
					{-20,-10,-10, -5, -5,-10,-10,-20}};
int queenB[8][8] = {{-20,-10,-10, -5, -5,-10,-10,-20},
					{-10,  0,  5,  0,  0,  0,  0,-10},
					{-10,  5,  5,  5,  5,  5,  0,-10},
					{0,  0,  5,  5,  5,  5,  0, -5},
					{-5,  0,  5,  5,  5,  5,  0, -5},
					{-10,  0,  5,  5,  5,  5,  0,-10},
					{-10,  0,  0,  0,  0,  0,  0,-10},
					{-20,-10,-10, -5, -5,-10,-10,-20}};
int kingW[8][8] = {{-30,-40,-40,-50,-50,-40,-40,-30},
					{-30,-40,-40,-50,-50,-40,-40,-30},
					{-30,-40,-40,-50,-50,-40,-40,-30},
					{-30,-40,-40,-50,-50,-40,-40,-30},
					{-20,-30,-30,-40,-40,-30,-30,-20},
					{-10,-20,-20,-20,-20,-20,-20,-10},
					{20, 20,  0,  0,  0,  0, 20, 20},
					{20, 30, 10,  0,  0, 10, 30, 20}};
int kingB[8][8] = {{20, 30, 10,  0,  0, 10, 30, 20},
					{20, 20,  0,  0,  0,  0, 20, 20},
					{-10,-20,-20,-20,-20,-20,-20,-10},
					{-20,-30,-30,-40,-40,-30,-30,-20},
					{-30,-40,-40,-50,-50,-40,-40,-30},
					{-30,-40,-40,-50,-50,-40,-40,-30},
					{-30,-40,-40,-50,-50,-40,-40,-30},
					{-30,-40,-40,-50,-50,-40,-40,-30}};
					

/*Functia de evaluare care calculeaza situatia actuala a tablei din persectiva
engine-ului. Valoarea rezultata este data de valoarea materiala a pieselor
engine-ului insumat cu bonus, din care se scade valoarea materiala a pieselor 
adversarului insumat cu bonus.*/
int evaluate() {
	int sumW = 0, sumB = 0, i , j;

	for(i = 2; i < 10; i++) {
		for(j = 2; j < 10; j++) {
			//verific fiecare piesa de pe tabla si adaug la sumW, respectiv sumB,
			//valuarea ei si bonusul pozitiei
			//daca este pion alb
			if(board[i][j] == PawnW) {
				sumW = sumW + 100 + pawnW[i-2][j-2];
			}
			//daca este pion negru
			else if(board[i][j] == PawnB) {
				sumB = sumB + 100 + pawnB[i-2][j-2];
			}
			//daca este cal alb
			else if(board[i][j] == KnightW) {
				sumW = sumW + 320 + knightW[i-2][j-2];
			}
			//daca este cal negru
			else if(board[i][j] == KnightB) {
				sumB = sumB + 320 + knightB[i-2][j-2];
			}
			//daca este nebun alb
			else if(board[i][j] == BishopW) {
				sumW = sumW + 330 + bishopW[i-2][j-2];
			}
			//daca este nebun negru
			else if(board[i][j] == BishopB) {
				sumB = sumB + 330 + bishopB[i-2][j-2];
			}
			//daca este tura alb
			else if(board[i][j] == RookW) {
				sumW = sumW + 550 + rookW[i-2][j-2];
			}
			//daca este tura negru
			else if(board[i][j] == RookB) {
				sumB = sumB + 550 + rookB[i-2][j-2];
			}
			//daca este regina alba
			else if(board[i][j] == QueenW) {
				sumW = sumW + 900 + queenW[i-2][j-2];
			}
			//daca este regina neagra
			else if(board[i][j] == QueenB) {
				sumB = sumB + 900 + queenB[i-2][j-2];
			}
			//daca este rege alb
			else if(board[i][j] == KingW) {
				sumW = sumW + 20000 + kingW[i-2][j-2];
			}
			//daca este rege negru
			else if(board[i][j] == KingB) {
				sumB = sumB + 20000 + kingB[i-2][j-2];
			}
		}
	}
	if (side)
		return sumW - sumB;
	else
		return sumB - sumW;
}
